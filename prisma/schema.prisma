generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_URI")
}

model User {
  id              Int              @id @default(autoincrement())
  created_at      DateTime         @default(now())
  image           String?
  email           String           @unique
  first_name      String?
  last_name       String?
  role            USER_ROLE
  password        String?
  items_cutting   Item_Cutting[]   @relation("workerDetails")
  items_stitching Item_Stitching[] @relation("workerDetails")
  user_otps       User_Otps[]
}

model InviteLink {
  id         Int       @id @default(autoincrement())
  create_at  DateTime  @default(now())
  email      String
  role       USER_ROLE
  token      String    @unique
  expires_at DateTime
  used       Boolean   @default(false)
}

model User_Otps {
  id         Int         @id @default(autoincrement())
  created_at DateTime    @default(now())
  otp        String
  purpose    OTP_PURPOSE
  used       Boolean     @default(false)
  user_id    Int
  User       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expires_at DateTime
}

model Orders {
  id                   Int          @id @default(autoincrement())
  created_at           DateTime     @default(now())
  required_date        DateTime
  updated_at           DateTime     @updatedAt
  completed_at         DateTime?
  supplier_name        String
  supplier_address     String?
  customer_email       String
  remarks              String?
  delivery_period      Int?
  status               ORDER_STATUS @default(PENDING)
  delivery_destination String
  payment_terms        String
  freight_terms        String
  total_amount         Int
  sales_tax            Int          @default(0)
  discount             Int          @default(0)
  freight              Int?
  net_amount           Int
  items                Order_Item[] @relation("orderItems")
}

model Order_Item {
  id                        Int                       @id @default(autoincrement())
  created_at                DateTime                  @default(now())
  item_image                String
  item_description          String
  item_code                 String
  additional_specifications String?
  status                    ORDER_ITEM_STATUS         @default(PENDING)
  current_process           ORDER_ITEM_CURRENT_STAGE?
  order_id                  Int
  category                  ORDER_CATEGORY
  unit                      String
  quantity                  Int
  rate                      Int
  amount                    Int
  cutting                   Item_Cutting[]            @relation("cuttingItem")
  dispatched                Item_Dispatch[]           @relation("dispatchedItem")
  finishing                 Item_Finishing[]          @relation("finishingItem")
  packaging                 Item_Packaging[]          @relation("packagingItem")
  quality_control           Item_Quality_Control[]    @relation("qualityCheckDetails")
  stitching                 Item_Stitching[]          @relation("stitchingItem")
  washing                   Item_Washing[]            @relation("washingItem")
  order                     Orders                    @relation("orderItems", fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Item_Cutting {
  id             Int            @id @default(autoincrement())
  created_at     DateTime       @default(now())
  start_date     DateTime       @default(now())
  last_updated   DateTime       @updatedAt
  completed_at   DateTime?
  department     DEPARTMENT     @default(CUTTING_DEPT)
  status         CUTTING_STATUS @default(RAW_MATERIALS_ISSUED)
  piece_rate     Int?
  worker_id      Int?
  operations     Json?
  total_quantity Int?
  order_item_id  Int            @unique
  order_item     Order_Item     @relation("cuttingItem", fields: [order_item_id], references: [id], onDelete: Cascade)
  worker         User?          @relation("workerDetails", fields: [worker_id], references: [id])
}

model Item_Stitching {
  id             Int              @id @default(autoincrement())
  created_at     DateTime         @default(now())
  start_date     DateTime         @default(now())
  last_updated   DateTime         @updatedAt
  completed_at   DateTime?
  department     DEPARTMENT       @default(STITCHING_DEPT)
  status         STITCHING_STATUS @default(RAW_MATERIALS_ISSUED)
  piece_rate     Int?
  worker_id      Int?
  operations     Json?
  total_quantity Int?
  order_item_id  Int              @unique
  order_item     Order_Item       @relation("stitchingItem", fields: [order_item_id], references: [id], onDelete: Cascade)
  worker         User?            @relation("workerDetails", fields: [worker_id], references: [id])
}

model Item_Washing {
  id              Int            @id @default(autoincrement())
  created_at      DateTime       @default(now())
  start_date      DateTime       @default(now())
  last_updated    DateTime       @updatedAt
  completed_at    DateTime?
  department      DEPARTMENT     @default(WASHING_DEPT)
  status          WASHING_STATUS @default(PRODUCT_OUTSOURCED)
  washing_details Json?
  operations      Json?
  total_quantity  Int?
  order_item_id   Int            @unique
  order_item      Order_Item     @relation("washingItem", fields: [order_item_id], references: [id], onDelete: Cascade)
}

model Item_Finishing {
  id                Int              @id @default(autoincrement())
  created_at        DateTime         @default(now())
  start_date        DateTime         @default(now())
  last_updated      DateTime         @updatedAt
  completed_at      DateTime?
  department        DEPARTMENT       @default(FINISHING_DEPT)
  status            FINISHING_STATUS @default(RAW_MATERIALS_ISSUED)
  finishing_details Json?
  operations        Json?
  total_quantity    Int?
  order_item_id     Int              @unique
  order_item        Order_Item       @relation("finishingItem", fields: [order_item_id], references: [id], onDelete: Cascade)
}

model Item_Quality_Control {
  id                    Int                    @id @default(autoincrement())
  created_at            DateTime               @default(now())
  start_date            DateTime               @default(now())
  last_updated          DateTime               @updatedAt
  department            DEPARTMENT             @default(QUALITY_CONTROL_DEPT)
  status                QUALITY_CONTROL_STATUS @default(RAW_MATERIALS_ISSUED)
  quality_check_details Json
  operations            Json
  total_quantity        Int
  order_item_id         Int                    @unique
  order_item            Order_Item             @relation("qualityCheckDetails", fields: [order_item_id], references: [id], onDelete: Cascade)
}

model Item_Packaging {
  id                Int            @id @default(autoincrement())
  created_at        DateTime       @default(now())
  start_date        DateTime       @default(now())
  last_updated      DateTime       @updatedAt
  completed_at      DateTime?
  department        DEPARTMENT     @default(PACKAGING_DEPT)
  status            PACKING_STATUS @default(RAW_MATERIALS_ISSUED)
  packaging_details Json?
  operations        Json?
  total_quantity    Int?
  order_item_id     Int            @unique
  order_item        Order_Item     @relation("packagingItem", fields: [order_item_id], references: [id], onDelete: Cascade)
}

model Item_Dispatch {
  id                  Int                @id @default(autoincrement())
  created_at          DateTime           @default(now())
  start_date          DateTime           @default(now())
  last_updated        DateTime           @updatedAt
  completed_at        DateTime?
  department          DEPARTMENT         @default(DISPATCHED_DEPT)
  status              DISPATCHING_STATUS @default(RAW_MATERIALS_ISSUED)
  dispatching_details Json?
  operations          Json?
  total_quantity      Int?
  order_item_id       Int                @unique
  order_item          Order_Item         @relation("dispatchedItem", fields: [order_item_id], references: [id], onDelete: Cascade)
}

model Fabric_Request {
  id              Int      @id @default(autoincrement())
  created_at      DateTime @default(now())
  required_date   DateTime
  last_updated    DateTime @updatedAt
  request_details Json
  operations      Json
  total_quantity  Int
}

model Customer_Issue {
  id             Int      @id @default(autoincrement())
  created_at     DateTime @default(now())
  customer_email String
  description    String
}

enum USER_ROLE {
  SUPER_ADMIN
  ORGANIZATIONAL_ADMIN
  PROCESS_MANAGER_WIP
  PROCESS_MANAGER_FID
  PROCESS_MANAGER_FINISHING
  PROCESS_MANAGER_SM
  EMPLOYEE
}

enum ORDER_CATEGORY {
  ZIPPER
  ACCESSORIES
}

enum OTP_PURPOSE {
  LOGIN
  FORGOT_PASSWORD
  EMAIL_VERIFICATION
}

enum ORDER_STATUS {
  PENDING
  COMPLETED
}

enum ORDER_ITEM_STATUS {
  PENDING
  COMPLETED
}

enum ORDER_ITEM_CURRENT_STAGE {
  CUTTING
  STITCHING
  WASHING
  FINISHING
  PACKAGING
  DISPATCHING
}

enum CUTTING_STATUS {
  RAW_MATERIALS_ISSUED
  COMPLETED
}

enum STITCHING_STATUS {
  RAW_MATERIALS_ISSUED
  COMPLETED
}

enum WASHING_STATUS {
  PRODUCT_OUTSOURCED
  COMPLETED
}

enum FINISHING_STATUS {
  RAW_MATERIALS_ISSUED
  COMPLETED
}

enum QUALITY_CONTROL_STATUS {
  RAW_MATERIALS_ISSUED
  COMPLETED
}

enum PACKING_STATUS {
  RAW_MATERIALS_ISSUED
  COMPLETED
}

enum DISPATCHING_STATUS {
  RAW_MATERIALS_ISSUED
  COMPLETED
}

enum DEPARTMENT {
  CUTTING_DEPT
  STITCHING_DEPT
  WASHING_DEPT
  FINISHING_DEPT
  QUALITY_CONTROL_DEPT
  PACKAGING_DEPT
  DISPATCHED_DEPT
}

enum UK_SIZE {
  UK_4
  UK_6
  UK_8
  UK_10
  UK_12
  UK_14
  UK_16
  UK_18
  UK_20
  UK_22
  UK_24
  UK_26
  UK_28
  UK_30
}
